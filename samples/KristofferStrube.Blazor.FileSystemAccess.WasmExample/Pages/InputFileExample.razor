@page "/InputFileExample"
@inject FileSystemAccessService FileSystemAccessService

<PageTitle>InputFile Example</PageTitle>

We can currently read the bytes from a <code>IBrowserFile</code> from the native <code>InputFile</code> component and
parse these to the <code>FileSystemWritableFileStream</code> by converting it to a string, but it would be nice if we could just
copy the existing stream directly to the <code>FileSystemWritableFileStream</code>.
<br />
This can be achieved if <code>FileSystemWritableFileStream</code> extends the .NET class <code>Stream</code>.
<br />
<br />
<InputFile OnChange="OnChange" class="btn btn-primary" />
@if (buffer is not null)
{
    <br />
    <br />
    <button class="btn btn-success" @onclick="Save">Save</button>
}

@code {
    public byte[] buffer;

    public async Task OnChange(InputFileChangeEventArgs args)
    {
        var file = args.File;
        using var stream = file.OpenReadStream();
        buffer = new byte[stream.Length];
        await stream.ReadAsync(buffer);
    }

    public async Task Save()
    {
        var fileHandle = await FileSystemAccessService.ShowSaveFilePickerAsync();
        var writable = await fileHandle.CreateWritableAsync();
        await writable.WriteAsync(BytesToString(buffer));
        await writable.CloseAsync();
    }

    private static string BytesToString(byte[] bytes)
    {
        using MemoryStream stream = new MemoryStream(bytes);
        using StreamReader streamReader = new StreamReader(stream);
        return streamReader.ReadToEnd();
    }
}
