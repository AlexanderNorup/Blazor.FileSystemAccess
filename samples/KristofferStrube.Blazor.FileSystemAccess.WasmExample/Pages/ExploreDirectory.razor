@page "/ExploreDirectory"
@inject FileSystemAccessService FileSystemAccessService

<PageTitle>Explore Directory</PageTitle>

@if (Entities.Count == 0)
{
    <button @onclick="OpenDictoryPicker" class="btn btn-primary">Open Directory</button>
}
else
{
    @($"{EntitiesChecked} / {TotalEntities} entites checked for size")
    <table style="border:solid 1px; width:100%; border-collapse: collapse;">
        @foreach (Entity entry in Entities)
        {
            <tr style="border:solid 1px;">
                <td style="border:solid 1px;">
                    @if (entry.Kind is FileSystemHandleKind.Directory)
                    {
                        <span class="oi oi-folder" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-file" aria-hidden="true"></span>
                    }
                </td>
                <td style="border:solid 1px;">
                    @entry.Name
                </td>
                <td style="border:solid 1px;">
                    @ReadableByteSize(entry.Size)
                </td>
            </tr>
        }
    </table>
}


@code {
    protected List<Entity> Entities = new();

    protected int TotalEntities;

    protected int EntitiesChecked;

    protected async Task OpenDictoryPicker()
    {
        FileSystemDirectoryHandle directoryHandle = null;
        try
        {
            var options = new DirectoryPickerOptions() { StartIn = WellKnownDirectory.Pictures };
            directoryHandle = await FileSystemAccessService.ShowDirectoryPickerAsync(options);
        }
        catch (JSException ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            if (directoryHandle != null)
            {
                var values = await directoryHandle.ValuesAsync();
                TotalEntities = values.Length;
                EntitiesChecked = 0;
                StateHasChanged();
                var queue = new Queue<(Entity entity, FileSystemDirectoryHandle dir, FileSystemHandle value)>();
                foreach (var value in values)
                {
                    var entity = new Entity(value.Kind, value.Name);
                    queue.Enqueue((entity, directoryHandle, value));
                    Entities.Add(entity);
                    EntitiesChecked++;
                    StateHasChanged();
                }
                while (queue.Count > 0)
                {
                    var (entity, dir, value) = queue.Dequeue();
                    if (value.Kind is FileSystemHandleKind.File)
                    {
                        var fileSystemHandle = await dir.GetFileHandleAsync(value.Name);
                        var file = await fileSystemHandle.GetFileAsync();
                        entity.Size += file.Size;
                    }
                    else
                    {
                        var fileSystemDirectoryHandle = await dir.GetDirectoryHandleAsync(value.Name);
                        var innerValues = await fileSystemDirectoryHandle.ValuesAsync();
                        TotalEntities += innerValues.Length;
                        StateHasChanged();
                        foreach (var innerValue in innerValues)
                        {
                            queue.Enqueue((entity, fileSystemDirectoryHandle, innerValue));
                            EntitiesChecked++;
                            StateHasChanged();
                        }
                    }
                }
            }
        }
    }

    protected class Entity
    {
        public Entity(FileSystemHandleKind Kind, string Name)
        {
            this.Kind = Kind;
            this.Name = Name;
        }
        public FileSystemHandleKind Kind { get; set; }
        public string Name { get; set; }
        public ulong Size { get; set; }
    }

    // From https://stackoverflow.com/questions/281640/how-do-i-get-a-human-readable-file-size-in-bytes-abbreviation-using-net
    private string ReadableByteSize(ulong size)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size = size / 1024;
        }

        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
        // show a single decimal place, and no space.
        return String.Format("{0:0.##} {1}", size, sizes[order]);
    }
}